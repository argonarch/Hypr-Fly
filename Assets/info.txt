"""
for member in get_tree().get_nodes_in_group("items"):
		member.hide()
		member.queue_free()
	print(str('se entro al area: ', area.get_name()))

var area_neutral = false
var sector : String

get_node("../Principal/neutral").mouse_exited.connect(_on_neutral_mouse_exited)
get_node("../Principal/sector").mouse_exited.connect(_on_sector_mouse_exited)

_process()
	if area_neutral and sector == "sector-"+num_of_name():
		position = get_global_mouse_position()

func _on_neutral_mouse_exited():
	area_neutral = true
	print("salio mouse")
	#can_grab = true
	pass
	
func _on_sector_mouse_entered():
	
	print("mouse toco un sector")
	#can_grab = true
	pass
	
func num_of_name():
	for num in get_name().split():
		if num.is_valid_int():
			return  str(num)
			
func _on_sector_mouse_exited():
	print("saliste del sector")
	
func _on_area_exited(area):
	print(str('saliste del area: ', area.get_name()))
	sector = area.get_name()
"""

"""
for member in get_tree().get_nodes_in_group("sectors"):
	member.mouse_entered.connect(_on_sector_mouse_entered)
pass
"""
"""
		print(num)
		print(mid_item)
		print(radian_end)
		print(radian_center)
		print(rad_to_deg(radian_center))
		
input_event.connect(_on_input_event)

func _on_input_event(viewport, event, shape_idx):
	if event is InputEventMouseButton:
		can_grab = event.pressed
	pass
"""
"""
		var vectores = PackedVector2Array([
		Vector2(min_diametro_sector,0).rotated(radian_start),
		Vector2(max_diametro_sector,0).rotated(radian_start),
		Vector2(max_diametro_sector,0).rotated(radian_center),
		Vector2(max_diametro_sector,0).rotated(radian_end),
		Vector2(min_diametro_sector,0).rotated(radian_end),
		Vector2(min_diametro_sector,0).rotated(radian_center)
		])
"""
var min_diametro_sector = 100

"""
	if Global.neutral_exit and Global.sector == "sector-"+num_of_name():
		can_grab = true
		$Line2D.visible = true
		position = get_global_mouse_position()
	elif Global.neutral_exit == false and can_grab == true:
		$Line2D.visible = false
		can_grab = false
		position = init_position
"""
	#if Global.item_selected == true:
	
	"""
	if neutral_status == true:
		pass	
	else:
		can_grab = false
	"""

plugin pizza entered shape
func angler(mama):
	angles = mama
	if Engine.is_editor_hint() and is_inside_tree():
		get_tree().call_group("sectors", "angler", mama)
		
		
"""
		for node in get_tree().get_nodes_in_group("sectors_shape"):
			node.queue_free()
		for node in get_tree().get_nodes_in_group("sectors"):
			node.queue_free()
		"""
